git_source(:github) {|name| "https://github.com/#{name}.git" }

gem 'rys', github: 'easysoftware/rys', branch: 'master'
gem 'rys_management', github: 'easysoftware/rys_management', branch: 'master'

group :test do
  gem 'ryspec', github: 'easysoftware/ryspec', branch: 'master'
end

# How to add credentials for the source (choose one option)
#
# 1. Run:
#   bundle config gems.easysoftware.com API_KEY
#
# 2. Set environment variable:
#   BUNDLE_GEMS__EASYSOFTWARE__COM=API_KEY
#
# 3. In a gemfile:
#   Bundler.settings.temporary('gems.easysoftware.com' => API_KEY)
#
# source 'https://gems.easysoftware.com' do
#   gem 'rys'
# end

# The build.yml indicates that easy gems were built.
# So there is no need for easygems server connection.
#
# Otherwise, it could fail if user doesn't have an access key.
#
if File.exist?(File.join(__dir__, 'gems/build.yml'))
  Bundler.settings.temporary(
    'mirror.https://gems.easysoftware.com' => Bundler.settings.mirror_for('https://rubygems.org')
  )
end

# Add a packaged gems
# `gems` copied source code for the package
# `local` gitignored and for local developemnt
#
gemspecs_pattern = File.join(__dir__, '{gems,local}/*/*.gemspec')
Dir.glob(gemspecs_pattern) do |gemspec_file|

  # To prefer packaged gems before gemfile definition because
  # - commenting gems during build process is not bullet-proof
  # - somebody can copy gems without commenting definition
  #
  spec = Bundler.load_gemspec(gemspec_file)
  @dependencies.delete_if do |dep|
    if dep.name == spec.name && dep.type != :development
      Bundler.ui.warn "Multiple definition of '#{spec.name}' (#{gemspec_file})"
      true
    end
  end

  gemspec path: File.dirname(gemspec_file)
end
